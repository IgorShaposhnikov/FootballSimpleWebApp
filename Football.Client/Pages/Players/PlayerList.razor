@page "/"
@page "/players"
@using Football.Client.Objects

@inject HttpClient _httpClient
@inject DialogService DialogService
@inject HubConnection hubConnection

@if (!_isLoaded)
{
    <p>Загрузка информации о игроках...</p>
}
else
{
    <RadzenDataGrid EmptyText="Игроки отсутсвуют добавьте их во вкладке Добавить игрока" @ref="PlayersGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@_players" TItem="Player" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
        <Columns>
            <RadzenDataGridColumn TItem="Player" Property="FirstName" Title="Имя" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="Player" Property="LastName" Title="Фамилия" Width="160px" />
            <RadzenDataGridColumn TItem="Player" Property="Gender" Title="Пол" Width="160px" />
            <RadzenDataGridColumn TItem="Player" Property="Birthday" Title="День рождения" Width="120px" FormatString="{0:MM/dd/yyyy}" />
            <RadzenDataGridColumn TItem="Player" Property="Country" Title="Страна" FormatString="{0:d}" Width="160px" />
            <RadzenDataGridColumn TItem="Player" Property="TeamName" Title="Команда" Width="160px" />
            <RadzenDataGridColumn TItem="Player">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click="@(args => OpenPlayerEditor(data.Id))" Text="Изменить" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code
{
    private RadzenDataGrid<Player> PlayersGrid = new RadzenDataGrid<Player>();
    private bool _isLoaded;

    private List<Player> _players = new();
    private Team[] _teams = null;


    #region Public & Protected Methods    


    /// <summary>
    /// Подписываемся на SignalR изменения. Вызывает метод LoadData.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // подписываемся на обновления хаба.
        hubConnection.On<Player, string>("PlayerAdded", OnPlayerAdded);
        hubConnection.On<Player, string>("PlayerUpdated", OnPlayerUpdated);

        LoadData();
    }

    #endregion Public & Protected Methods


    #region Private Methods


    /// <summary>
    /// Обновляет информацию об игроке. Вызывает метод `RadzenGrid`.Reload();
    /// </summary>
    /// <param name="updatedPlayer">Новая информация об игроке</param>
    void OnPlayerUpdated(Player updatedPlayer, string teamName)
    {
        updatedPlayer.TeamName = teamName;
        for (var i = 0; i < _players.Count; i++)
        {
            if (_players[i].Id == updatedPlayer.Id)
                _players[i] = updatedPlayer;
        } 

        InvokeAsync(StateHasChanged);
        PlayersGrid.Reload();
    }

    /// <summary>
    /// Добавляет игрока в список.
    /// Для того, чтобы новые данные отобразились в RadzenGrid,
    /// используем метод reload.
    /// </summary>
    /// <param name="player">Игрок</param>
    /// <param name="teamName">Команда игрока</param>
    void OnPlayerAdded(Player player, string teamName)
    {
        player.TeamName = teamName;
        _players.Add(player);
        InvokeAsync(StateHasChanged);

        PlayersGrid.Reload();
    }

    /// <summary>
    /// Загружаем список игроков и команд.
    /// Проверяем, что команда существует, иначе устанавливаем Unknown.
    /// </summary>
    async void LoadData()
    {
        _players = await _httpClient.GetFromJsonAsync<List<Player>>("players") ?? _players;
        _teams = await _httpClient.GetFromJsonAsync<Team[]>("teams") ?? _teams;

        foreach (var player in _players)
        {
            var team = _teams.Where(team => team.Id == player.TeamId).FirstOrDefault();
            player.TeamName = team == null ? "Unknown" : team.Name;
        }

        _isLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Открывает модальное окно редактирование игрока.
    /// </summary>
    /// <param name="playerId">Guid игрока которого хотим редактировать</param>
    async Task OpenPlayerEditor(Guid playerId)
    {
        await DialogService.OpenAsync<PlayerEdit>($"Редактирование игрока",
            new Dictionary<string, object>() { { "PlayerId", playerId } },
            new DialogOptions() { Width = "700px", Height = "720px" });
    }


    #endregion Private Methods
}